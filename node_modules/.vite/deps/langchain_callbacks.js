import {
  BaseCallbackHandler,
  BaseTracer,
  CallbackManager,
  CallbackManagerForChainRun,
  CallbackManagerForLLMRun,
  CallbackManagerForRetrieverRun,
  CallbackManagerForToolRun,
  ConsoleCallbackHandler,
  LangChainTracer,
  LangChainTracerV1,
  TraceGroup,
  awaitAllCallbacks,
  consumeCallback,
  getTracingCallbackHandler,
  getTracingV2CallbackHandler,
  traceAsGroup
} from "./chunk-WVRQLKEI.js";
import "./chunk-UV5CTPV7.js";

// node_modules/.pnpm/langchain@0.0.213/node_modules/@langchain/core/dist/tracers/run_collector.js
var RunCollectorCallbackHandler = class extends BaseTracer {
  /**
   * Creates a new instance of the RunCollectorCallbackHandler class.
   * @param exampleId The ID of the example.
   */
  constructor({ exampleId } = {}) {
    super();
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "run_collector"
    });
    Object.defineProperty(this, "exampleId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "tracedRuns", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.exampleId = exampleId;
    this.tracedRuns = [];
  }
  /**
   * Persists the given run object.
   * @param run The run object to persist.
   */
  async persistRun(run) {
    const run_ = { ...run };
    run_.reference_example_id = this.exampleId;
    this.tracedRuns.push(run_);
  }
};
export {
  BaseCallbackHandler,
  BaseTracer,
  CallbackManager,
  CallbackManagerForChainRun,
  CallbackManagerForLLMRun,
  CallbackManagerForRetrieverRun,
  CallbackManagerForToolRun,
  ConsoleCallbackHandler,
  LangChainTracer,
  LangChainTracerV1,
  RunCollectorCallbackHandler,
  TraceGroup,
  awaitAllCallbacks,
  consumeCallback,
  getTracingCallbackHandler,
  getTracingV2CallbackHandler,
  traceAsGroup
};
//# sourceMappingURL=langchain_callbacks.js.map
